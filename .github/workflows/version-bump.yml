---
name: Version Bump and Build

on:
  push:
    branches: [ main ]
    paths:
      - 'music_downloader/**'
      - 'requirements.txt'
      - 'setup.py'
      - '!music_downloader/tests/**'
      - '!**.md'

jobs:
  version-bump:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel semver gitpython
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Bump version
        id: bump-version
        run: |
          # Get current version from setup.py
          $current_version = (Select-String -Path setup.py -Pattern "version='([^']+)'").Matches.Groups[1].Value
          
          # Parse commit messages since last tag
          $commits = git log --pretty=format:"%s" $(git describe --tags --abbrev=0)..HEAD
          
          # Determine version bump type based on commit messages
          $bump_type = "patch"  # Default to patch
          foreach ($msg in $commits) {
            if ($msg -match "BREAKING CHANGE|!:") {
              $bump_type = "major"
              break
            }
            if ($msg -match "^feat") {
              $bump_type = "minor"
            }
          }
          
          # Bump version using semver
          $version = python -c "import semver; print(str(semver.VersionInfo.parse('$current_version').bump_$bump_type()))"
          
          # Update setup.py with new version
          (Get-Content setup.py) -replace "version='[^']+'", "version='$version'" | Set-Content setup.py
          
          # Set output for later steps
          echo "new_version=$version" >> $env:GITHUB_OUTPUT
          echo "Bumped from $current_version to $version"
      
      - name: Build package
        run: python setup.py sdist bdist_wheel
      
      - name: Create version commit and tag
        run: |
          $new_version = "${{ steps.bump-version.outputs.new_version }}"
          git add setup.py
          git commit -m "chore: bump version to $new_version [skip ci]"
          git tag -a "v$new_version" -m "Release v$new_version"
          git push
          git push --tags 